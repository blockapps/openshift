# STRATO v4.4.0-rc0
apiVersion: v1
items:
##### DEPLOYMENTS #####
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: smd
  spec:
    replicas: 1
    selector:
      deploymentconfig: smd
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: smd
      spec:
        containers:
        - env:
          - name: EXT_STORAGE_S3_BUCKET
          - name: NODE_HOST
            value: node-__project_name__.__hostname__
          - name: NODE_NAME
            value: node-__project_name__.__hostname__
          - name: OAUTH_ENABLED
          - name: SINGLE_NODE
            value: "true"
          - name: SMD_MODE
          - name: ssl
          - name: STRATO_GS_MODE
          image: 172.30.1.1:5000/strato/blockapps-strato-smd:latest
          name: smd
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - smd
        from:
          kind: ImageStreamTag
          name: blockapps-strato-smd:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: apex
  spec:
    replicas: 1
    selector:
      deploymentconfig: apex
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: apex
      spec:
        containers:
        - env:
          - name: blocHost
            value: bloc:8000
          - name: EXT_STORAGE_S3_BUCKET
          - name: EXT_STORAGE_S3_ACCESS_KEY_ID
          - name: EXT_STORAGE_S3_SECRET_ACCESS_KEY
          - name: NODE_HOST
            value: node-__project_name__.__hostname__
          - name: OAUTH_ENABLED
          - name: postgres_host
            value: postgres
          - name: postgres_password
            value: api
          - name: postgres_port
            value: "5432"
          - name: postgres_user
            value: postgres
          - name: postgrestHost
            value: postgrest:3001
          - name: PROD_DEV_MODE
          - name: SINGLE_NODE
            value: "true"
          - name: SMD_MODE
          - name: STRATO_GS_MODE
          - name: stratoHost
            value: strato:3000
          - name: vaultWrapperHost
            value: vault-wrapper:8000
          image: 172.30.1.1:5000/strato/blockapps-strato-apex:latest
          name: apex
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - apex
        from:
          kind: ImageStreamTag
          name: blockapps-strato-apex:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: dappstore
  spec:
    replicas: 1
    selector:
      deploymentconfig: dappstore
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: dappstore
      spec:
        containers:
        - env:
          - name: NODE_HOST
            value: node-__project_name__.__hostname__
#          - name: ssl
          image: 172.30.1.1:5000/strato/blockapps-strato-dappstore:latest
          name: dappstore
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - dappstore
        from:
          kind: ImageStreamTag
          name: blockapps-strato-dappstore:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: bloc
  spec:
    replicas: 1
    selector:
      deploymentconfig: bloc
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: bloc
      spec:
        containers:
        - env:
          - name: BLOC_DEBUG
          - name: kafkaHost
            value: kafka
          - name: kafkaPort
            value: "9092"
          - name: postgres_host
            value: postgres
          - name: postgres_password
            value: api
          - name: postgres_port
            value: "5432"
          - name: postgres_slipstream_db
            value: cirrus
          - name: postgres_user
            value: postgres
          - name: PROCESS_MONITORING
          - name: SLIPSTREAM_OPTIONAL
          - name: SLIPSTREAM_DEBUG
          - name: SMD_MODE
#          - name: stateDiffTopic
          - name: stratoHost
            value: strato:3000
          - name: vaultWrapperHost
            value: vault-wrapper:8000
          - name: zookeeper_conn
            value: zookeeper
          image: 172.30.1.1:5000/strato/blockapps-strato-bloc:latest
          name: bloc
          ports:
          - containerPort: 8000
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - bloc
        from:
          kind: ImageStreamTag
          name: blockapps-strato-bloc:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: redis
  spec:
    replicas: 1
    selector:
      deploymentconfig: redis
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: redis
      spec:
        containers:
        - args:
          - redis-server
          - --appendonly
          - "yes"
          image: 172.30.1.1:5000/strato/blockapps-strato-redis:latest
          name: redis
          ports:
          - containerPort: 6379
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: blockapps-strato-redis:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: vault-wrapper
  spec:
    replicas: 1
    selector:
      deploymentconfig: vault-wrapper
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: vault-wrapper
      spec:
        containers:
        - env:
          - name: postgres_host
            value: postgres
          - name: postgres_password
            value: api
          - name: postgres_port
            value: "5432"
          - name: postgres_user
            value: postgres
          - name: postgres_vault_wrapper_db
            value: oauth
          - name: VAULTWRAPPER_DEBUG
          image: 172.30.1.1:5000/strato/blockapps-strato-vault-wrapper:latest
          name: vault-wrapper
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - vault-wrapper
        from:
          kind: ImageStreamTag
          name: blockapps-strato-vault-wrapper:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: strato
  spec:
    replicas: 1
    selector:
      deploymentconfig: strato
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: strato
      spec:
        containers:
        - env:
          - name: addBootnodes
          - name: backupblocks
          - name: blockstanbul
          - name: blockstanbulAdmins
          - name: blockstanbulBlockPeriodMs
          - name: blockstanbulPrivateKey
          - name: blockstanbulRoundPeriodS
          - name: blockstanbulSkipCheck
          - name: blockTime
          - name: bootnode
          - name: connectionTimeout
          - name: debugFail
          - name: evmDebugMode
          - name: evmTraceMode
          - name: genesis
          - name: genesisBlock
          - name: kafkaHost
            value: kafka
          - name: lazyBlocks
          - name: maxConn
          - name: maxReturnedHeaders
          - name: maxTxsPerBlock
          - name: minBlockDifficulty
          - name: mineBlocks
            value: "true"
          - name: miningAlgorithm
          - name: miningThreads
          - name: networkID
          - name: numMinPeers
          - name: postgres_host
            value: postgres
          - name: postgres_password
            value: api
          - name: postgres_user
            value: postgres
          - name: PROCESS_MONITORING
          - name: redisBDBNumber
          - name: redisHost
            value: redis
          - name: redisPort
            value: "6379"
          - name: seqDebugMode
          - name: seqMaxEventsPerIter
          - name: seqMaxUsPerIter
          - name: seqRTSOPTs
          - name: useSyncMode
          - name: validators
          - name: vmRunnerRTSOPTs
          - name: zkHost
            value: zookeeper
          image: 172.30.1.1:5000/strato/blockapps-strato-strato:latest
          name: strato
          ports:
          - containerPort: 30303
          - containerPort: 3000
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - strato
        from:
          kind: ImageStreamTag
          name: blockapps-strato-strato:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: postgrest
  spec:
    replicas: 1
    selector:
      deploymentconfig: postgrest
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: postgrest
      spec:
        containers:
        - env:
          - name: blocHost
            value: bloc:8000
          - name: PG_ENV_POSTGRES_DB
            value: cirrus
          - name: PG_ENV_POSTGRES_HOST
            value: postgres
          - name: PG_ENV_POSTGRES_PASSWORD
            value: api
          - name: PG_ENV_POSTGRES_USER
            value: postgres
          - name: PG_PORT_5432_TCP_PORT
            value: "5432"
          image: 172.30.1.1:5000/strato/blockapps-strato-postgrest:latest
          name: postgrest
          ports:
          - containerPort: 3001
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgrest
        from:
          kind: ImageStreamTag
          name: blockapps-strato-postgrest:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: postgres
  spec:
    replicas: 1
    selector:
      deploymentconfig: postgres
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: postgres
      spec:
        containers:
        - env:
          - name: POSTGRES_PASSWORD
            value: api
          image: 172.30.1.1:5000/strato/blockapps-strato-postgres:latest
          name: postgres
          ports:
          - containerPort: 5432
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgres
        from:
          kind: ImageStreamTag
          name: blockapps-strato-postgres:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: nginx
  spec:
    replicas: 1
    selector:
      deploymentconfig: nginx
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: nginx
      spec:
        containers:
        - env:
          - name: authBasic
            value: "true"
          - name: blockstanbul
          - name: blockTime
          - name: OAUTH_CLIENT_ID
          - name: OAUTH_CLIENT_SECRET
          - name: OAUTH_DISCOVERY_URL
          - name: OAUTH_ENABLED
          - name: OAUTH_JWT_USERNAME_PROPERTY
          - name: OAUTH_JWT_VALIDATION_ENABLED
            value: "false"
          - name: OAUTH_JWT_VALIDATION_DISCOVERY_URL
          - name: OAUTH_STRATO42_FALLBACK
          - name: SMD_MODE
          - name: SERVE_LOGS
          - name: ssl
          - name: sslCertFileType
          - name: STRATO_GS_MODE
          - name: uiPassword
            value: __ui_password__
          image: 172.30.1.1:5000/strato/blockapps-strato-nginx:latest
          name: nginx
          ports:
          - containerPort: 80
#          - containerPort: 443
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: blockapps-strato-nginx:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: docs
  spec:
    replicas: 1
    selector:
      deploymentconfig: docs
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: docs
      spec:
        containers:
        - env:
          - name: API_URL
            value: /strato-api/eth/v1.2/swagger.json
          image: 172.30.1.1:5000/strato/blockapps-strato-swagger-ui:latest
          name: docs
          ports:
          - containerPort: 8080
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - docs
        from:
          kind: ImageStreamTag
          name: blockapps-strato-swagger-ui:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: zookeeper
  spec:
    replicas: 1
    selector:
      deploymentconfig: zookeeper
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: zookeeper
      spec:
        containers:
        - image: 172.30.1.1:5000/strato/blockapps-strato-zookeeper:latest
          name: zookeeper
          ports:
          - containerPort: 2181
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - zookeeper
        from:
          kind: ImageStreamTag
          name: blockapps-strato-zookeeper:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: kafka
  spec:
    replicas: 1
    selector:
      deploymentconfig: kafka
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: kafka
      spec:
        containers:
        - env:
          - name: KAFKA_PORT # Hack for kafka on kubernetes, see https://github.com/wurstmeister/kafka-docker/issues/122
            value: "9092"
          - name: KAFKA_ADVERTISED_HOST_NAME
            value: kafka
          - name: KAFKA_ADVERTISED_PORT
            value: "9092"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          - name: KAFKA_DELETE_TOPIC_ENABLE
            value: "true"
          - name: KAFKA_LOG_CLEANER_ENABLE
            value: "false"
          - name: KAFKA_LOG_RETENTION_HOURS
            value: "2147483647"
          - name: KAFKA_OFFSET_METADATA_MAX_BYTES
            value: "1048576"
          - name: KAFKA_MAX_REQUEST_SIZE
            value: "33554432"
          - name: KAFKA_MESSAGE_MAX_BYTES
            value: "33554432"
          image: 172.30.1.1:5000/strato/blockapps-strato-kafka:latest
          # KAFKA ON OPENSHIFT ADVERTISED_HOST FIX
          command: [sh, -c, echo '127.0.0.1 kafka' >> /etc/hosts && start-kafka.sh]
          name: kafka
          ports:
          - containerPort: 9092
          resources: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - kafka
        from:
          kind: ImageStreamTag
          name: blockapps-strato-kafka:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: prometheus
  spec:
    replicas: 1
    selector:
      deploymentconfig: prometheus
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          deploymentconfig: prometheus
      spec:
        containers:
        - image: 172.30.1.1:5000/strato/blockapps-strato-prometheus:latest
          name: prometheus
          ports:
          - containerPort: 9090
          resources: {}
    test: false
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - prometheus
          from:
            kind: ImageStreamTag
            name: blockapps-strato-prometheus:latest
        type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

##### SERVICES #####

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: smd
  spec:
    ports:
    - name: 3002-tcp
      port: 3002
      targetPort: 3002
    selector:
      deploymentconfig: smd
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: apex
  spec:
    ports:
    - name: 3001-tcp
      port: 3001
      targetPort: 3001
    selector:
      deploymentconfig: apex
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: dappstore
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      targetPort: 3000
    selector:
      deploymentconfig: dappstore
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: bloc
  spec:
    ports:
    - name: 8000-tcp
      port: 8000
      targetPort: 8000
    - name: 8002-tcp
      port: 8002
      targetPort: 8002
    selector:
      deploymentconfig: bloc
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: redis
  spec:
    ports:
    - name: 6379-tcp
      port: 6379
      targetPort: 6379
    selector:
      deploymentconfig: redis
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: vault-wrapper
  spec:
    ports:
    - name: 8000-tcp
      port: 8000
      targetPort: 8000
    selector:
      deploymentconfig: vault-wrapper
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: strato
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      targetPort: 3000
    - name: 30303-tcp
      port: 30303
      targetPort: 30303
#    #TODO: MAP UDP PORT (FOR MULTINODE)
#    - name: 30303-udp
#      port: 30303
#      targetPort: 30303
    selector:
      deploymentconfig: strato
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: postgrest
  spec:
    ports:
    - name: 3001-tcp
      port: 3001
      targetPort: 3001
    selector:
      deploymentconfig: postgrest
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: postgres
  spec:
    ports:
    - name: 5432-tcp
      port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: postgres
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: nginx
  spec:
    ports:
    - name: 80-tcp
      port: 80
      targetPort: 80
    selector:
      deploymentconfig: nginx
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: docs
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: docs
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: zookeeper
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      targetPort: 2181
    selector:
      deploymentconfig: zookeeper
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: kafka
  spec:
    ports:
    - name: 9092-tcp
      port: 9092
      targetPort: 9092
    selector:
      deploymentconfig: kafka
  status:
    loadBalancer: {}
    
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: prometheus
  spec:
    ports:
      - name: 9090-tcp
        port: 9090
        targetPort: 9090
    selector:
      deploymentconfig: prometheus
  status:
    loadBalancer: {}

##### ROUTES #####

- kind: Route
  apiVersion: v1
  metadata:
    name: node
  spec:
    host:
    to:
      kind: Service
      name: nginx
    port:
      targetPort: 80-tcp

##### META #####

kind: List
metadata: {}
